<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard1.3</TargetFramework>
    <PackageTargetFallback>portable-net45+win8+wp8+wpa81</PackageTargetFallback>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
    <DebugType>full</DebugType>
  </PropertyGroup>
  <PropertyGroup>
    <!-- https://github.com/NuGet/Home/issues/5630 -->
    <PackageId>CSharpGuidelinesAnalyzer.NuGetBugRequiresNewId</PackageId>
    <Title>C# Coding Guidelines Analyzer</Title>
    <Version>2.0.1-pre</Version>
    <Authors>Bart Koelman</Authors>
    <Company />
    <PackageLicenseUrl>http://www.apache.org/licenses/LICENSE-2.0</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/bkoelman/CSharpGuidelinesAnalyzer</PackageProjectUrl>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <Description>Reports diagnostics for C# coding guidelines that are not already covered by Resharper. Requires Visual Studio 2017 Update 3. Use v1.0.1 if you are using Visual Studio 2015 with Update 2 or higher.</Description>
    <PackageReleaseNotes>Updated for IOperation API changes in Visual Studio 2017 Update 3. Use v1.0.1 if you are using Visual Studio 2015 with Update 2 or higher.</PackageReleaseNotes>
    <Copyright>Apache License, Version 2.0</Copyright>
    <PackageTags>csharp c# coding guidelines analyzer</PackageTags>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <DevelopmentDependency>true</DevelopmentDependency>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <OutputPath>..\..\..\bin\Debug</OutputPath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <OutputPath>..\..\..\bin\Release</OutputPath>
  </PropertyGroup>
  <ItemGroup>
    <None Include="..\..\..\LICENSE.txt" Link="LICENSE.txt" />
  </ItemGroup>
  <ItemGroup>
    <None Update="tools\*.ps1" CopyToOutputDirectory="PreserveNewest" Pack="true" PackagePath="" />
    <None Update="build\*.props" CopyToOutputDirectory="PreserveNewest" Pack="true" PackagePath="" />
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Update="NETStandard.Library" PrivateAssets="all" />
    <PackageReference Include="CSharpGuidelinesAnalyzer" Version="2.0.0" />
    <PackageReference Include="JetBrains.Annotations" Version="11.0.0" PrivateAssets="all" />
    <PackageReference Include="JetBrains.ExternalAnnotations" Version="10.2.29" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis" Version="2.3.1" PrivateAssets="all" />
    <PackageReference Include="ResharperCodeContractNullability" Version="1.0.8" PrivateAssets="all" />
  </ItemGroup>
  <!--
    To bypass the NuGet cache during install/uninstall debugging, uncomment the target below.

  <Target Name="SetPackageVersionFromCurrentTime" BeforeTargets="BeforeBuild">
    <PropertyGroup>
      <PackageVersion>$([System.DateTime]::Now.ToString(`yyMM`)).$([System.DateTime]::Now.ToString(`ddHH`)).$([System.DateTime]::Now.ToString(`mmss`))-pre</PackageVersion>
    </PropertyGroup>
    <Message Importance="High" Text="Setting PackageVersion to $(PackageVersion)" />
  </Target>
  -->
  <Target Name="CopyExternalAnnotations" BeforeTargets="BeforeBuild" Condition="'$(BuildingInsideVisualStudio)' != 'true'">
    <PropertyGroup>
      <ExternalAnnotationsVersion>10.2.29</ExternalAnnotationsVersion>
      <ExternalAnnotationsSourceDir>"$(USERPROFILE)\.nuget\packages\JetBrains.ExternalAnnotations\$(ExternalAnnotationsVersion)\DotFiles\ExternalAnnotations\*.xml"</ExternalAnnotationsSourceDir>
      <ExternalAnnotationsTargetDir>"$(LOCALAPPDATA)\JetBrains\Installations\ReSharperPlatformVs15\ExternalAnnotations"</ExternalAnnotationsTargetDir>
    </PropertyGroup>

    <Message Importance="High" Text="Copying External Annotations from: $(ExternalAnnotationsSourceDir) to: $(ExternalAnnotationsTargetDir)" />
    <Exec Command="xcopy $(ExternalAnnotationsSourceDir) $(ExternalAnnotationsTargetDir) /s /i /r /y /q /d" LogStandardErrorAsError="true" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
  </Target>
</Project>